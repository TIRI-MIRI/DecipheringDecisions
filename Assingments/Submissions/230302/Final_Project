import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

nifty_data = yf.download("AAPL", start="2022-01-01", end="2024-01-01")
nifty_data['Range'] = nifty_data['High'] - nifty_data['Low']
nifty_data.head()

def calculate_candlestick_patterns(data):
    data['Doji'] = np.abs(data['Close'] - data['Open'] / data['High']- data['Low']) < 0.1
    return data
nifty_data = calculate_candlestick_patterns(nifty_data)

nifty_data['Range'] = nifty_data['High'] - nifty_data['Low']
df = pd.DataFrame(nifty_data)
df.reset_index(inplace=True)
def narrow_range(data, k):

    result_column_name = f'NR{k}'
    data[result_column_name] = False

    for i in range(k - 1, len(data)):
        current_range = data.loc[i,'Range']
        previous_ranges = data.loc[i - k + 1:i - 1, 'Range']

        if current_range < previous_ranges.min():
            data.loc[i, result_column_name] = True

narrow_range(df, 4)
narrow_range(df, 6)
nifty_data = df
nifty_data

def fuzzify_nrk(data, k, c, vmin, vmax):
    fuzzy_values = np.zeros(len(data))
    for i in range(k, len(data)):
        D = sum(data['Range'].iloc[i-k:i] < data['Range'].iloc[i-k:i].max())
        R_max = data['Range'].iloc[i-k:i].max()
        R_0 = data['Range'].iloc[i]
        eta = (R_max - R_0) / R_max if R_max != 0 else 0
        x = D + eta
        if x < vmin:
            fuzzy_values[i] = 0
        elif x < vmax:
            fuzzy_values[i] = c * (x - vmin)
        else:
            fuzzy_values[i] = 1
    return fuzzy_values

params = {
    'NR4': {'k': 4, 'c': 1/2, 'vmin': 2, 'vmax': 4},
    'NR6': {'k': 6, 'c': 1/3, 'vmin': 3, 'vmax': 6},
    'NR7': {'k': 7, 'c': 1/3, 'vmin': 4, 'vmax': 7},
 }

for k in params:
    k_value = params[k]['k']
    c_value = params[k]['c']
    vmin_value = params[k]['vmin']
    vmax_value = params[k]['vmax']
    nifty_data[f'Fuzzy {k}'] = fuzzify_nrk(nifty_data, k_value, c_value, vmin_value, vmax_value)

print(nifty_data.head())

def fuzzify_doji(data, rho):
    fuzzy_values = np.zeros(len(data))
    for i in range(len(data)):
        x = abs((data['Open'].iloc[i] - data['Close'].iloc[i])) / (data['High'].iloc[i] - data['Low'].iloc[i])
        if 0 <= x <= rho:
            fuzzy_values[i] = 1 - x / rho
        else:
            fuzzy_values[i] = 0
    return fuzzy_values
nifty_data['Fuzzy Doji'] = fuzzify_doji(nifty_data, rho=0.3)
nifty_data

def fuzzify_uphook(data,delta):
  fuzzy_values = np.zeros(len(data))
  for i in range(1,len(data)):
    if(data['Open'][i]>data['High'][i-1]):
      x=data['Open'][i]-data['High'][i-1]-delta
      if(x<-0.5):
        fuzzy_values[i]=0
      elif(x>=-0.5 and x<0):
        fuzzy_values[i]=x
      elif(x>=0):
        fuzzy_values[i]=1
    elif(data['Open'][i]<data['Low'][i-1]):
      x=data['Low'][i-1]-data['Open'][i]-delta
      if(x<-0.5):
        fuzzy_values[i]=0
      elif(x>=-0.5 and x<0):
        fuzzy_values[i]=x
      elif(x>=0):
        fuzzy_values[i]=1
  return fuzzy_values

nifty_data['Fuzzy Hook-Day']=fuzzify_uphook(nifty_data,delta=0.5)
nifty_data

nifty_data[(abs(nifty_data['Fuzzy Hook-Day']-0.5)!=0.5)]

def crisp_output(data):

  singleton=[0.25,0.5,0.75,1]
  crisp=np.zeros(len(data))


  m=[
      [0,0.6,0.5,0],
      [0,0.33,0.33,0.33],
      [0,0.1,1,0.9],
      [0,0.44,0.5,1],
      [0,0.1,0.2,0.7]
    ]
  a=np.zeros(5)
  b=np.zeros(4)

  for i in range(len(data)):
    u=0
    a[0]=data['Fuzzy NR4'][i]
    a[1]=data['Fuzzy NR6'][i]
    a[2]=data['Fuzzy NR7'][i]
    a[3]=data['Fuzzy Doji'][i]
    a[4]=data['Fuzzy Hook-Day'][i]
    for p in range(4):
      b[p]=max(min(a[0],m[0][p]),min(a[1],m[1][p]),min(a[2],m[2][p]),min(a[3],m[3][p]),min(a[4],m[4][p]))
    for d in range(4):
      u=u+(b[d]*singleton[d])/1.1
    crisp[i]=u

    data['crisp']=crisp


crisp_output(nifty_data)

nifty_data[nifty_data['crisp']>0.8]

def signals(data):
  signal=np.zeros(len(data))
  for i in range(len(data)-1):
    if(data['crisp'][i]>0.8):
      signal[i+1]=data['crisp'][i]-0.8
    else:
      continue
  data['signal']=signal

signals(nifty_data)

def transact(data,capital):
  initial=capital
  for i in range(len(data)):
    if(data['signal'][i]>0):
      noofshare=(capital*data['signal'][i]//data['Open'][i])
      if(noofshare>20):
        capital=capital-20*(data['Open'][i]-data['Close'][i])
      else:
        capital=capital-noofshare*(data['Open'][i]-data['Close'][i])
  returns=((capital-initial)*100)/initial
  return returns


transact(nifty_data,10000)
